extends ../slides-src/layout.pug
block variables
	- title = 'Programación funcional en javascript e introducción a ES6'
block slides
	section
		h2 Programación funcional en javascript e introducción a es6
	
	section
		h2 ES6 / ES2015
		ul
			li
				a(href="http://es6-features.org/") http://es6-features.org/
			li
				a(href="https://babeljs.io/repl/") https://babeljs.io/repl/
	section
		h3 let, const
		pre
			code.javascript(data-trim).
				function varTest() {
				  var x = 1;
				  if (true) {
				    var x = 2;  // same variable!
				  }
				  console.log(x);  // 2
				}

		pre.fragment
			code.javascript(data-trim).
				function letTest() {
				  let x = 1;
				  if (true) {
				    let x = 2;  // different variable
				  }
				  console.log(x);  // 1
				}
	section
		h3 let, const
		pre
			code.javascript(data-trim).
				const someNumber = 44;

				someNumber = 55; // Error!
	section
		h3 Arrow Functions
		pre
			code.javascript(data-trim).
				// ES5
				var hasListPrice = function(product) {
					return product.listPrice != product.bestPrice;
				}

				// ES6
				const isAvailable = product => product.listPrice != product.bestPrice;
	section
		h2 Qué es la programación funcional?
		p.fragment Un paradigma de programación
		p.fragment Un estilo de programación
		div.fragment
			h3 Características
			ul
				li Eliminación de efectos secundarios
				li Funciones Puras
				li Inmutabilidad de los datos
				li Funciones de alto orden
				li Recursión
				// li Expresiones lambda
				// li Transparecia referencial
				// li Clousures

	section
		h3 Efectos secundarios
		p Modifica alguna variable fuera de su scope
		pre
			code.javascript(data-trim).
				let a = 0;

				function increment() {
					a++;
				}
	section
		h3 Funciones puras
		ul
			li.fragment Simpre da el mismo resultado para los mismos parametros
			li.fragment La llamada a la función no causa efectos secundarios
		pre.fragment
			code.javascript(data-trim).
				function addElement(someArray) {
					const anotherArray = someArray.slice();
					anotherArray.push("element");

					return anotherArray;
				}
	section
		h3 Funciones de alto orden
		ul
			li.fragment Tiene una o más funciones como parámetro
			li.fragment o retorna una función
	section
		h3 Funciones de alto orden
		pre.fragment
			code.javascript(data-trim).
				function double(x) {
					return x*2;
				}

				function specialAdd(x, y, operation) {
					return operation(x) + operation(y);
				}

				specialAdd(2,3, double);
		pre.fragment
			code.javascript(data-trim).
				function Counter(){
					let count = 0;
					return function() {
						return ++count;
					}
				}

				let increment = Counter();

				increment();
	section
		h3 Map, Filter, Reduce
			+img('map-reduce-sandwich.png')
	section
		div
			h3 Map
			pre
				code.javascript(data-trim).
					const productIds = products.map(product => product.id);
		div.fragment
			h3 Filter
			pre
				code.javascript(data-trim).
					const availableProducts = products.filter(product => product.hasStock);
		div.fragment
			h3 Reduce
			pre
				code.javascript(data-trim).
					const total = products.reduce((acum, product) => acum + product.price);