extends ../slides-src/layout.pug
block variables
	- title = 'Capacitación de Git'
	- favicon = 'https://git-scm.com/favicon.ico'
	- theme = 'moon'
block slides
	section
		div(style={background: '#fff'})
			+img('logo.svg')(style={border: 'none', 'box-shadow': 'none'})
	section
		p Sitio Oficial: 
			a(href="https://git-scm.com/") https://git-scm.com/
		p Versión actual(estable): 2.17.0
	section
		h2 Sistema de control de versiones (VCS)
	section
		h3 Centralizado
		+img('centralized.png')(style={ 'max-height': '82vh'})
	section
		h3 Distribuido
		+img('distributed.png')(style={ 'max-height': '82vh'})
	section
		h2 Git
		ul
			li.fragment Sistema de control de versiones distribuido
			li.fragment Manejo de datos por copias instantáneas, no por diferencias
			li.fragment La mayoría de las operaciones son locales
	section
		h3 Copias por diferencias
		+img('deltas.png')(style={ 'background-color': '#fff', border: 'none' })
	section
		h3 Copias instantanéas (git)
		+img('snapshots.png')(style={ 'background-color': '#fff', border: 'none' })
	section
		h3 Git areas
		+img('git-areas.png')
	section
		h2 Comandos
	section
		h3 Configuraciones
		pre
			code.bash(data-trim).
				$ git config --global user.name "Santiago Pernigotti"
				$ git config --global user.email santiago@fizzmod.com
				$ git config --global credential.helper cache
				$ git config --list
		p Las configuraciones globales se guardan en ~/.gitconfig
	section
		h3 Iniciar un repositorio
		pre
			code.bash(data-trim).
				$ git init
		br
		h3 Clonar un repositorio existente
		pre
			code.bash(data-trim).
				$ git clone http://fizzmod-server/fizzmod/aurora.git
	section
		h3 Ciclo de vida del estado de los archivos
		+img('lifecycle.png')(style={ 'background-color': '#fff', border: 'none' })
	section
		h4 Rastrear archivos nuevos o Preparar(stage) archivos modificados
		pre
			code.bash(data-trim).
				$ git add index.js
		br
		div.fragment
			h4 Revisar el estado de los Archivos
			pre
				code.bash(data-trim).
					$ git status
	section
		h4 Ver los cambios no preparados (not staged)
		pre
			code.bash(data-trim).
				$ git diff
		br
		div.fragment
			h4 Ver los cambios preparados (staged)
			pre
				code.bash(data-trim).
					$ git diff --staged
	section
		h4 Committear los cambios
		pre
			code.bash(data-trim).
				$ git commit -m "message"
		br
		div.fragment
			h4 Commitear salteando el area de preparación
			pre
				code.bash(data-trim).
					$ git commit -am "message"
	section
		h4 Ver el Historial de los commits
		pre
			code.bash(data-trim).
				$ git log
		br
		pre
			code.bash(data-trim).
				$ git log --all --decorate --oneline --graph
	section
		h4 Rehacer el último commit
		pre
			code.bash(data-trim).
				$ git commit --amend
		br
		div.fragment
			h4 Deshacer un archivo preparado
			pre
				code.bash(data-trim).
					$ git reset HEAD index.js
		br
		div.fragment
			h4 Deshacer un archivo modificado
			pre
				code.bash(data-trim).
					$ git  checkout -- index.js
	section
		h3 Repositorios remotos (remotes)
		+img('remotes.svg')(style={ 'background': '#fff', height: '300px' })
		p.fragment
			| El remote por defecto es 
			strong origin
	section
		h4 Ver los remotes
		pre
			code.bash(data-trim).
				$ git  remote -v
		br
		div.fragment
			h4 Modificar url del remote
			pre
				code.bash(data-trim).
					$ git remote set-url origin http://usuario@fizz.com.ar:8080/fizzmod/sportline.git
	section
		h4 Traer datos
		pre
			code.bash(data-trim).
				$ git fetch [remote]
		br
		div.fragment
			h4 Traer datos y mergear a la branch actual
			pre
				code.bash(data-trim).
					$ git pull [remote] [branch]
		br
		div.fragment
			h4 Enviar datos
			pre
				code.bash(data-trim).
					$ git push [remote] [branch]
	section
		h3 Branches
		+img('branches.svg')(style={ 'background': '#fff' })
	section
		+img('branch-and-history.png')(style={ 'background': '#fff' })
		p historial de commits sobre master
	section
		h4 Crear una nueva branch
		pre
			code.bash(data-trim).
				$ git branch testing
		+img('head-to-master.png')(style={ 'background': '#fff' })
	section
		h4 Cambiar de branch
		pre
			code.bash(data-trim).
				$ git checkout testing
		+img('head-to-testing.png')(style={ 'background': '#fff' })
	section
		p Modifico y commiteo en la branch testing
		pre
			code.bash(data-trim).
				$ nano index.js
				$ git commit -am 'made a change'
		+img('advance-testing.png')(style={ 'background': '#fff' })
	section
		p Vuelvo a master
		pre
			code.bash(data-trim).
				$ git checkout master
		+img('checkout-master.png')(style={ 'background': '#fff' })
	section
		p Hago algunos cambios más y commiteo
		pre
			code.bash(data-trim).
				$ nano index.js
				$ git commit -am 'made other changes'
		+img('advance-master.png')(style={ 'background': '#fff' })
	section
		h4 Mergear una branch
		pre
			code.bash(data-trim).
				$ git merge testing
		+img('what-is-a-merge.gif').fragment
	section
		+img('what-is-a-fast-forward.gif')
	section
		h4 Listar las branches locales
		pre
			code.bash(data-trim).
				$ git branch
				  QA
				* master
				  testing
		pre
			code.bash(data-trim).
				$ git branch -v # muestra el último commit de cada una
		br
		div.fragment
			h4 Ver ramas mergeadas o no con la rama activa
			pre
				code.bash(data-trim).
					$ git branch --merged
			pre
				code.bash(data-trim).
					$ git branch --no-merged

	section
		div
			h3 Remote branches
